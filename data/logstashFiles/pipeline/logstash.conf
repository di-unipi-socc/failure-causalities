# Docker log input
input {
    gelf {
        port => 9600
    }
}

#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------

# Clear the logs
filter {

    # level (6 for stdout, 3 for stderr, not to be confused with application loglevel).
    if ![level] {
        drop {
        }
    }
    # Prune useless field for this use cases
    prune {
        blacklist_names => ["version" , "host", "image_id",
        "image_name", "created", "command"]
    }


}

#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------

filter {


# Parses json log
    if [tag] == "jsonLog" {
        json {
            source => "message"
            target => "Log"
            skip_on_invalid_json => true
        }
    # Remove unused field and add the Type field
        mutate {
            remove_field => ["[Log][pid]", "[Log][__in]", "[Log][v]",
                "[Log][req][remoteAddress]", "[Log][req][remotePort]", "[Log][responseTime]",
                "[Log][hostname]","[Log][req][id]", "[Log][req][url]", "[Log][req][headers]",
                "[Log][res][headers]", "[Log][msg]", "[Log][name]", "[Log][module]"]
            rename => {
                "[Log][time]" => "app_timestamp"
            }
        }

    # Adding label to log
    # label: operation - info: start
        if "Starting with pid" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
            prune {
                blacklist_names => ["Log"]
            }
        }
        # label: state - info: running {
                else {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
            prune {
                blacklist_names => ["Log"]
            }
        }

    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses apache log
    if [tag] == "apacheLog" {
        grok {
            match => {
                "message" => "%{COMBINEDAPACHELOG}"
            }
            target => "Log"
        }

        mutate {
            rename => {
                "[Log][timestamp]" => "app_timestamp"
            }
        }


    # label: operation - info: start (ratings container)
        if "configured -- resuming normal operations" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
        }
                else
        # label: operation - info: stop (ratings container)
                if "caught SIGWINCH, shutting down gracefully" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "stop"
                }
            }
        }
                else
        # label: state - info: running
                if [Log][response] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
            prune {
                blacklist_names => ["Log"]
            }
        }
    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses MongoDB log
    if [tag] == "mongoDbLog" {
        grok {
            match => {
                "message" => "%{TIMESTAMP_ISO8601:timestamp} %{MONGO3_SEVERITY:level} %{MONGO3_COMPONENT:component}%{SPACE}(?:\[%{DATA:context}\])? %{GREEDYDATA:message}"
            }
            target => "Log"
        }
        mutate {
            rename => {
                "[Log][timestamp]" => "app_timestamp"
            }
        }

    # label: operation - info: start
        if "SERVER RESTARTED" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
        }
                else
        # label: operatio - info: stop
                if "[signalProcessingThread] got signal 15 (Terminated)" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "stop"
                }
            }
        }
                else
        # lable: state - info: running
                if [Log][level] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
        }
    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses MySql log
    if [tag] == "mySqlServerLog" {
        grok {
            match => {
                "message" => "%{TIMESTAMP_ISO8601:timestamp}(?:\s%{INT:pid})\s\[%{GREEDYDATA:level}\]\s%{GREEDYDATA:message}"
            }
            target => "Log"
        }
        mutate {
            rename => {
                "[Log][timestamp]" => "app_timestamp"
            }
        }
    # label: operation - info: start
        if "mysqld (mysqld 5.7.30) starting as process" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
        }
                else
        # label: operation - info: stop
                if "mysqld: Shutdown complete" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "stop"
                }
            }
        }
                else
        # label: state - info: running
                if [Log][level] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
        }
    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses RabbitMq log
    if [tag] == "rabbitMqLog" {

        grok {
            match => {
                "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] \<%{DATA:field_misc}\> %{GREEDYDATA:message}"
            }
            target => "Log"
        }

        mutate {
            rename => {
                "[Log][timestamp]" => "app_timestamp"
            }
        }

    # label: operation - info: start
        if "Starting RabbitMQ" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
        }
                else
        # label: operation - info: stop
                if "Stopping and halting node" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "stop"
                }
            }
        }
                else
        # label: state - info: running
                if [Log][level] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
        }


    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses redis log
    if [tag] == "redisLog" {
        grok {
            match => {
                "message" => "%{POSINT:pid}\:%{WORD:role}\s%{REDISTIMESTAMP:timestamp}\s#\s%{LOGLEVEL:level}(\:)?\s%{GREEDYDATA:message}"
            }
            target => "Log"
        }

        mutate {
            rename => {
                "[Log][timestamp]" => "app_timestamp"
            }
        }

    #label: operation - info: start
        if "Redis is starting" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
        }
                else
        #label: operation - info: stop
                if "Received SIGTERM scheduling shutdown..." in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "stop"
                }
            }
        }
                else
        #label: state - info: running
                if [Log][level] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
        }


    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#


# Parses java log
    if [tag] == "javaLog" {

        grok {
            match => {
                "message" => "\[%{NOTSPACE:process}\]\s%{LOGLEVEL:level}\s%{JAVACLASS:class}\s(\-)?\s%{GREEDYDATA:message}"
            }
            target => "Log"
        }

        mutate {
            add_field => {
                "app_timestamp" => ""
            }
        }

    #label: operation - info: start
        if "MLog clients using java 1.4+ standard logging" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
        }
                else
        #label: state - info: running
                if [Log][level] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
        }

    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses log from dispatch container
    if [tag] == "dispatchLog" {
        grok {
            pattern_definitions => {
                "MONTHNUM2" => "(?:0[1-9]|1[0-2])"
                "DISP_TIMESTAMP" => "%{YEAR}\/%{MONTHNUM2}\/%{MONTHDAY}\s%{HOUR}\:%{MINUTE}\:%{SECOND}"
            }
            match => {
                "message" => "%{DISP_TIMESTAMP:timestamp}\s%{USER:user}\:\s%{LOGLEVEL:level}\:\s%{GREEDYDATA:message}"
            }
            target => "Log"
        }

        mutate {
            rename => {
                "[Log][timestamp]" => "app_timestamp"
            }
        }

    #label: operation - info: start
        if "Starting Instana instrumentation" in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "start"
                }
            }
        }
                else
        #label: state - info: running
                if [Log][level] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }

        }


    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses log from payment container
    if [tag] == "paymentLog" {

        grok {
            match => {
                "message" => "\[%{TIMESTAMP_ISO8601:timestamp}\]\s%{LOGLEVEL:level}\s%{DATA:from}\:\s%{GREEDYDATA:message}"
            }
            target => "Log"
        }
        mutate {
            rename => {
                "[Log][timestamp]" => "app_timestamp"
            }
        }

    #label:opration - info: stop
        if "...brutally killing workers..." in [message] {
            mutate {
                add_field => {
                    "label" => "operation"
                }
                add_field => {
                    "info" => "stop"
                }
            }
        }
                else
        #label: state - info: running
                if [Log][level] {
            mutate {
                add_field => {
                    "label" => "state"
                }
                add_field => {
                    "info" => "running"
                }
            }
        }



    }

#--------------------------------------------------------------------------------------#
#--------------------------------------------------------------------------------------#

# Parses log from faultApp
    if [tag] == "faultApp" {
        json {
            source => "message"
            skip_on_invalid_json => true
        }
        mutate {
            remove_field => ["level", "version", "short_message", "host", "ltype"]
            rename => {
                "_info" => "info"
            }
            rename => {
                "_label" => "label"
            }
            rename => {
                "timestamp" => "app_timestamp"
            }
        }

        if "Error from" in [info] or "Exception:" in [info]{
            mutate {
                replace => {
                    "info" => "faulted"
                }
            }
        }

    # Delete the event sended from Flask when the app starts
        if ![label] {
            drop {

            }

        }

    }

    #--------------------------------------------------------------------------------------#
    #--------------------------------------------------------------------------------------#

    # rename the docker timestamp in a more readable format
    mutate {
        rename => {
            "@timestamp" => "dockerTimestamp"
        }
        rename => {
            "app_timestamp" => "timestamp"
        }
        rename => {
            "container_id" => "nodeId"
        }
        rename => {
            "container_name" => "nodeName"
        }
        add_field => {
            "nodeContainerId" => ""
        }
    }

    # tag message not parsed as other, just to sign that the container is up
    if "_grokparsefailure" in [tags] {
        if ![label] {
            mutate {
                add_field => {
                    "label" => "other"
                }
                add_field => {
                    "info" => ""
                }
            }
        }
        if ![app_timestamp] {
            mutate {
                add_field => {
                    "timestamp" => ""
                }
            }
        }
    }

    # Clear the log from useless field
    prune {
        blacklist_names => ["tag", "level", "Log"]
    }
}

#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------

output {
    stdout {
    }

    file {
        path => "/usr/share/logstash/log/test.log"
    }
}