# Docker log input
input {
    gelf {
        port => 9600
    }
}

#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------

# Clear the logs
filter {

    # level (6 for stdout, 3 for stderr, not to be confused with application loglevel).
    if ![level] {
        drop {
        }
    }
    # Prune useless field for this use cases
    prune {
        blacklist_names => ["version" , "host", "image_id",
        "image_name", "created", "command"]
    }


}

#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------

# Filter json format logs from container
filter {

    # Parses log from Pong
    if [tag] == "faultApp" {
        json {
            source => "message"
            skip_on_invalid_json => true
        }
        mutate {
            remove_field => ["level", "version", "short_message", "host", "ltype"]
            rename => {
                "_info" => "info"
            }
            rename => {
                "_label" => "label"
            }
            rename => {
                "timestamp" => "app_timestamp"
            }
        }

        if "Error from" in [info] or "Exception:" in [info]{
            mutate {
                replace => {
                    "info" => "faulted"
                }
            }
        }

        # Delete the event sended from Flask when the app starts
        if ![label] {
            drop {

            }

        }

    }

    #--------------------------------------------------------------------------------------#
    #--------------------------------------------------------------------------------------#

    # rename the docker timestamp in a more readable format
    mutate {
        rename => {
            "@timestamp" => "dockerTimestamp"
        }
        rename => {
            "app_timestamp" => "timestamp"
        }
        rename => {
            "container_id" => "nodeId"
        }
        rename => {
            "container_name" => "nodeName"
        }
        add_field => {
            "nodeContainerId" => ""
        }
    }

    # tag message not parsed as other, just to sign that the container is up
    if "_grokparsefailure" in [tags] {
        if ![label] {
            mutate {
                add_field => {
                    "label" => "other"
                }
                add_field => {
                    "info" => ""
                }
            }
        }
        if ![app_timestamp] {
            mutate {
                add_field => {
                    "timestamp" => ""
                }
            }
        }
    }

    # Clear the log from useless field
    prune {
        blacklist_names => ["tag", "level", "Log"]
    }
}

#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------
#-------------------------------------------------------------------------------------------------------------------------

output {
    stdout {
    }

    file {
        path => "/usr/share/logstash/log/test.log"
    }
}